
Palabras claves: 
ami : Amazon machine images


1) Introducción:
https://www.terraform.io/intro/index.html

Terraform  es una herramienta para la construcción, cambio y versionamiento  de infraestructura (en este caso en la nube)
de manera eficiente y segura
Se basa en archivos de configuración que describen los componentes requeridos para ejecutar una app en un proveedor de nube x


Instalacion:
https://learn.hashicorp.com/terraform/getting-started/install

Get started :
https://learn.hashicorp.com/terraform/getting-started/build
Al conjunto de archivos para describir la infraestructura se conoce como Configuración Terraform 

Instalar Aws CLI:https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html
1 debe tener python instalado


2 crear las variables de entorno python o seleccionar en el instalador que las cree automátocamente 
D:\Usuarios\juligove\AppData\Local\Programs\Python\Python37-32\Scripts\
D:\Usuarios\juligove\AppData\Local\Programs\Python\Python37-32\

3 instale aws  cli  ($ pip3 install awscli --upgrade --user)

4 configure la vaariable de entorno para que le funcione los comandos de aws
D:\Usuarios\juligove\AppData\Roaming\Python\Python37\Scripts

5 ejecute aws --version
6 configure las credenciales de la cuenta amazon 
el logueo como root es https://console.aws.amazon.com/console/home
 Configuracion . https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html
Tipos de acceso:
Como usuario root 
Con credeciales IAM amazon identity access management: La recomendada es que se configure por IAM:
As a best practice, do not use the AWS account root user access keys for any task where it's not required
Es decir que al crear un IAM user lo que va a pasar es que este se va a poder loguear 
con el usuari opero con la ontraseña de IAM y para persmisos más especiales el usuario
root deberá hacerlo con sus credenciales

1) Crear usuario admon
https://docs.aws.amazon.com/IAM/latest/UserGuide/getting-started_create-admin-group.html

Profiles: archivos(con configuracione como las credenciales)  divididosen secciones que pueden ser referenciados por su nombre

Administrator
claves de acceso: (se crean desde el aws console y la opcio nde generar credenciales)


::::::::::::::::AHORA SI EL 1ER COMANDO ::::::::::::::::
terraform init--->
terraform version---> version actual
terraform apply ---> muestra el plan de ejecución que va a ejecutar (antes de la version 0.11 de terraform 
se conocía como terraform plan), si sale un error es como hacer el build y ver errores de sintaxis
antes de ser ejecutados

Si hay error entonces se le da NO de lo contrario YES.

si al darle yes le sale el error::::::::::::::
 OptInRequired: You are not subscribed to this service
 S/ Al parecer se dá porque cada vez que uno hace la peticion de un servicio nuevo ejemplo ec2 o lambdas
 entonces amazon se lo habilitará 24 horas después.
 
::::::::::::::::Archivo terraform.tfstate::::::::::::::::::::::::
Muy importante porque guarda los id de los recursos creados, por ejemplo:
{
  "version": 4,
  "terraform_version": "0.12.8",
  "serial": 1,
  "lineage": "bbfd8a1c-9196-4840-1851-1f1a2bd17f31",
  "outputs": {},
  "resources": []
}
 

::::::::::::::::::::::::::::::::::::::::::::::::::


Destroy Infrastructure::::
(para eliminar la infra creda en en la cuenta, ya que genera cobros adicionales)
comando:
terraform destroy---> muestra que infraestructura va a eliminar y también solcitida una autorizacion (escribiento yes para enviar)
::::::::::::::::::::::::::::::::::::::::::::::::::

Resource Dependencies:::::::::::::::::::::

::::::::::::::::::::::::::::::::::::::::::::::::::



Provision:::::::::::::::::::::https://learn.hashicorp.com/terraform/getting-started/provision
En caso de que se requiera hacer configuraciones adicionales(ejecutar un shell script, subir imágenes)
 a la imagen que usemos entonces 
::::::::::::::::::::::::::::::::::::::::::::::::::



Input Variables:::::::::::::::::::::https://learn.hashicorp.com/terraform/getting-started/variables
ejemplo:
variable "region" {
  default = "us-east-1"
}

para evitar el hard coding se pueden crear variables en los archivos .tf , por ejemplo al inicio del archivos
tambien pueden existir archivos generales con extensió tfvars

# implicitly by using brackets [...]
variable "cidrs" { default = [] }

# explicitly
variable "cidrs" { type = list }
cidrs = [ "10.0.0.0/16", "10.1.0.0/16" ]

Maps:
variable "amis" {
  type = "map"
  default = {
    "us-east-1" = "ami-b374d5a5"
    "us-west-2" = "ami-4b32be2b"
  }
}

resource "aws_instance" "example" {
  ami           = var.amis[var.region]
  instance_type = "t2.micro"
}



::::::::::::::::::::::::::::::::::::::::::::::::::

Output Variables:::::::::::::::::::::https://learn.hashicorp.com/terraform/getting-started/outputs
Son variables que deseamos mostrar al hacer apply de algun archivo terraform que cree una infraestructura. Por ejemplo 
nos gustaría saber acerda de  load balancer IP, VPN address, etc.
output "ip" {
  value = aws_eip.ip.public_ip
}

$ terraform output ip --> para visualizar una variable tipo output en consola, en este caso se llama ip

::::::::::::::::::::::::::::::::::::::::::::::::::

Modules:::::::::::::::::::::https://learn.hashicorp.com/terraform/getting-started/modules

Up to this point, we've been configuring Terraform by editing Terraform configurations directly. 
As our infrastructure grows, this practice has a few key problems: a lack of organization, 
a lack of reusability, and difficulties in management for teams.

 to treat pieces of infrastructure as a black box.

Modules documentation:
https://www.terraform.io/docs/modules/index.html


Existe modulos con configuraciones base para aws y demás providers, estos se encuentran en el 
Terraform Registry (https://registry.terraform.io/)

Ejemplo:
terraform {
  required_version = "0.11.11"
}

provider "aws" {
  access_key = "AWS ACCESS KEY"
  secret_key = "AWS SECRET KEY"
  region     = "us-east-1"
}

module "consul" {
# source indica de donde nos descargaremos el modulo
# la fuente puede ser cualquiera Git, Mercurial, HTTP, and local files
  source      = "hashicorp/consul/aws"
  num_servers = "3"
}

Bacano que access_key y secret_key puedan estar como variables de ambiente

::::::::::::::::::::::::::::::::::::::::::::::::::

:::::::::::::::::Remote State Storage :::::::::::::::::::::::::::::::::
https://learn.hashicorp.com/terraform/getting-started/remote

Indica como correr terraform en un ambiente remoto, que es precisamente como es en la realidad
con los ambientes de pdn en la nube

la idea es aplicar la carateristica conocida como REMOTE BACKENDS que permite usar un espacion de almacenamiento 
compartido, así que cada miembro de un equipo pueda usar terraform para aplicar la misma infraestructura

https://www.terraform.io/docs/cloud/getting-started/index.html

::::::::::::::::::::::::::::::::::::::::::::::::::




